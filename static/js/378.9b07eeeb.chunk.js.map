{"version":3,"file":"static/js/378.9b07eeeb.chunk.js","mappings":"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","sources":["api/fetchTheMovieDB.js","components/Error/Error.jsx","components/ReviewsItem/ReviewsItem.styled.js","components/ReviewsItem/ReviewsItem.jsx","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","constants/statusList.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst api_key = '6d25a4756e0ff1ccca3eba13a74efa5c';\n\nexport const IMG_PATH_W300 = 'https://image.tmdb.org/t/p/w300';\nexport const IMG_PATH_W200 = 'https://image.tmdb.org/t/p/w200';\n\nconst mediaType = {\n  ALL: 'all',\n  MOVIE: 'movie',\n  TV: 'tv',\n  PERSON: 'person',\n};\nconst trendTime = {\n  DAY: 'day',\n  WEEK: 'week',\n};\nconst language = {\n  ENGLISH: 'en-US',\n  UKRAINIAN: 'uk-UA',\n};\n\nexport async function fetchTrend({ page }) {\n  const searchParams = new URLSearchParams({\n    api_key,\n    page,\n    language: language.ENGLISH,\n  });\n  const response = await axios.get(\n    `trending/${mediaType.MOVIE}/${trendTime.DAY}?${searchParams}`\n  );\n  return response.data;\n}\n\nexport async function fetchMovieById({ movieId }) {\n  const options = new URLSearchParams({\n    api_key,\n    language: language.ENGLISH,\n  });\n  const response = await axios.get(`${mediaType.MOVIE}/${movieId}?${options}`);\n  return response.data;\n}\n\nexport async function fetchCreditsById({ movieId }) {\n  const options = new URLSearchParams({\n    api_key,\n    language: language.ENGLISH,\n  });\n  const response = await axios.get(\n    `${mediaType.MOVIE}/${movieId}/credits?${options}`\n  );\n  return response.data;\n}\n\nexport async function fetchReviewsById({ movieId, page }) {\n  const options = new URLSearchParams({\n    api_key,\n    page,\n    language: language.ENGLISH,\n  });\n  const response = await axios.get(\n    `${mediaType.MOVIE}/${movieId}/reviews?${options}`\n  );\n  return response.data;\n}\n\nexport async function fetchSearch({ query, page }) {\n  const options = new URLSearchParams({\n    api_key,\n    page,\n    query,\n    language: language.ENGLISH,\n  });\n  const response = await axios.get(`search/${mediaType.MOVIE}?${options}`);\n  return response.data;\n}\n","import PropTypes from 'prop-types';\n\nexport default function Error({ error }) {\n  return <>{error}</>;\n}\n\nError.propTypes = {\n  error: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Name = styled.p`\n  font-weight: ${p => p.theme.fontWeights.bold};\n`;\n","import PropTypes from 'prop-types';\nimport { Box } from 'common/Box';\nimport * as SC from './ReviewsItem.styled';\n\nconst ReviewsItem = ({ author, content }) => {\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" gridGap={4}>\n      <SC.Name>Author: {author}</SC.Name>\n      <p>{content}</p>\n    </Box>\n  );\n};\n\nexport default ReviewsItem;\n\nReviewsItem.propTypes = {\n  author: PropTypes.string.isRequired,\n  content: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Ul = styled.ul`\n  margin-top: ${p => p.theme.space[4]}px;\n  margin-bottom: ${p => p.theme.space[4]}px;\n  margin-left: ${p => p.theme.space[5]}px;\n`;\n\nexport const Li = styled.li`\n  &:not(:last-child) {\n    margin-bottom: ${p => p.theme.space[5]}px;\n  }\n`;\n","import Loader from 'components/Loader';\nimport Error from 'components/Error';\nimport ReviewsItem from 'components/ReviewsItem';\nimport { Box } from 'common/Box';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchReviewsById } from 'api/fetchTheMovieDB';\nimport { statusList } from 'constants';\nimport * as SC from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n\n  const [reviewsDataById, setReviewsDataById] = useState([]);\n  const [status, setStatus] = useState(statusList.IDLE);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const getReviewsById = async () => {\n      const { PENDING, RESOLVED, REJECTED } = statusList;\n\n      setStatus(PENDING);\n\n      try {\n        const data = await fetchReviewsById({ movieId, page: 1 });\n        setStatus(RESOLVED);\n        setReviewsDataById(data.results);\n      } catch (error) {\n        setStatus(REJECTED);\n        setError(error.message);\n      }\n    };\n\n    getReviewsById();\n  }, [movieId, setError, setStatus]);\n\n  if (status === statusList.PENDING) {\n    return <Loader />;\n  }\n  if (status === statusList.REJECTED) {\n    return <Error error={error} />;\n  }\n  if (status === statusList.RESOLVED) {\n    return (\n      <>\n        {reviewsDataById.length !== 0 ? (\n          <SC.Ul>\n            {reviewsDataById.map(({ id, author, content }) => {\n              return (\n                <SC.Li key={id}>\n                  <ReviewsItem author={author} content={content} />\n                </SC.Li>\n              );\n            })}\n          </SC.Ul>\n        ) : (\n          <Box mt={4}>We don't have any reviews for this movie.</Box>\n        )}\n      </>\n    );\n  }\n};\n\nexport default Reviews;\n","export const statusList = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n"],"names":["axios","api_key","IMG_PATH_W300","IMG_PATH_W200","mediaType","trendTime","language","fetchTrend","page","searchParams","URLSearchParams","response","data","fetchMovieById","movieId","options","fetchCreditsById","fetchReviewsById","fetchSearch","query","Error","error","propTypes","PropTypes","Name","styled","p","theme","fontWeights","bold","author","content","Box","display","flexDirection","gridGap","Ul","space","Li","useParams","useState","reviewsDataById","setReviewsDataById","statusList","status","setStatus","setError","useEffect","getReviewsById","PENDING","RESOLVED","REJECTED","results","message","Loader","length","map","id","mt","IDLE"],"sourceRoot":""}