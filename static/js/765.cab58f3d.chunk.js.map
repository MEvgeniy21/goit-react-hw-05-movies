{"version":3,"file":"static/js/765.cab58f3d.chunk.js","mappings":"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","sources":["api/fetchTheMovieDB.js","components/CastItem/CastItem.styled.js","components/CastItem/CastItem.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Error/Error.jsx","constants/statusList.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst api_key = '6d25a4756e0ff1ccca3eba13a74efa5c';\n\nexport const IMG_PATH_W300 = 'https://image.tmdb.org/t/p/w300';\nexport const IMG_PATH_W200 = 'https://image.tmdb.org/t/p/w200';\n\nconst mediaType = {\n  ALL: 'all',\n  MOVIE: 'movie',\n  TV: 'tv',\n  PERSON: 'person',\n};\nconst trendTime = {\n  DAY: 'day',\n  WEEK: 'week',\n};\nconst language = {\n  ENGLISH: 'en-US',\n  UKRAINIAN: 'uk-UA',\n};\n\nexport async function fetchTrend({ page }) {\n  const searchParams = new URLSearchParams({\n    api_key,\n    page,\n    language: language.ENGLISH,\n  });\n  const response = await axios.get(\n    `trending/${mediaType.MOVIE}/${trendTime.DAY}?${searchParams}`\n  );\n  return response.data;\n}\n\nexport async function fetchMovieById({ movieId }) {\n  const options = new URLSearchParams({\n    api_key,\n    language: language.ENGLISH,\n  });\n  const response = await axios.get(`${mediaType.MOVIE}/${movieId}?${options}`);\n  return response.data;\n}\n\nexport async function fetchCreditsById({ movieId }) {\n  const options = new URLSearchParams({\n    api_key,\n    language: language.ENGLISH,\n  });\n  const response = await axios.get(\n    `${mediaType.MOVIE}/${movieId}/credits?${options}`\n  );\n  return response.data;\n}\n\nexport async function fetchReviewsById({ movieId, page }) {\n  const options = new URLSearchParams({\n    api_key,\n    page,\n    language: language.ENGLISH,\n  });\n  const response = await axios.get(\n    `${mediaType.MOVIE}/${movieId}/reviews?${options}`\n  );\n  return response.data;\n}\n\nexport async function fetchSearch({ query, page }) {\n  const options = new URLSearchParams({\n    api_key,\n    page,\n    query,\n    language: language.ENGLISH,\n  });\n  const response = await axios.get(`search/${mediaType.MOVIE}?${options}`);\n  return response.data;\n}\n","import styled from '@emotion/styled';\n\nexport const Img = styled.img`\n  width: 100px;\n  height: 150px;\n  object-fit: cover;\n`;\n","import { Box } from 'common/Box';\nimport { IMG_PATH_W200 } from 'api/fetchTheMovieDB';\nimport * as SC from './CastItem.styled';\n\nconst CastItem = ({ profile_path, name, character }) => {\n  const profilePath = profile_path\n    ? IMG_PATH_W200 + profile_path\n    : 'https://dummyimage.com/100x150/f5f5f5/a6a6a6.jpg&text=No+foto';\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" gridGap={4}>\n      <SC.Img\n        src={profilePath}\n        alt={name}\n        width=\"100\"\n        height=\"150\"\n        loading=\"lazy\"\n      />\n      <p>{name}</p>\n      <p>Character: {character}</p>\n    </Box>\n  );\n};\n\nexport default CastItem;\n","import styled from '@emotion/styled';\n\nexport const Ul = styled.ul`\n  margin-top: ${p => p.theme.space[4]}px;\n  margin-bottom: ${p => p.theme.space[4]}px;\n  margin-left: ${p => p.theme.space[5]}px;\n`;\n\nexport const Li = styled.li`\n  &:not(:last-child) {\n    margin-bottom: ${p => p.theme.space[5]}px;\n  }\n`;\n","import Loader from 'components/Loader';\nimport Error from 'components/Error';\nimport CastItem from 'components/CastItem';\nimport { Box } from 'common/Box';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCreditsById } from 'api/fetchTheMovieDB';\nimport { statusList } from 'constants';\nimport * as SC from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [castDataById, setCastDataById] = useState([]);\n  const [status, setStatus] = useState(statusList.IDLE);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const getMoviesCreditsById = async () => {\n      const { PENDING, RESOLVED, REJECTED } = statusList;\n\n      setStatus(PENDING);\n\n      try {\n        const data = await fetchCreditsById({ movieId });\n        setStatus(RESOLVED);\n        setCastDataById(data.cast);\n      } catch (error) {\n        setStatus(REJECTED);\n        setError(error.message);\n      }\n    };\n\n    getMoviesCreditsById();\n  }, [movieId, setError, setStatus]);\n\n  if (status === statusList.PENDING) {\n    return <Loader />;\n  }\n  if (status === statusList.REJECTED) {\n    return <Error error={error} />;\n  }\n  if (status === statusList.RESOLVED) {\n    return (\n      <>\n        {castDataById.length !== 0 ? (\n          <SC.Ul>\n            {castDataById.map(({ id, profile_path, name, character }) => {\n              return (\n                <SC.Li key={id}>\n                  <CastItem\n                    profile_path={profile_path}\n                    name={name}\n                    character={character}\n                  />\n                </SC.Li>\n              );\n            })}\n          </SC.Ul>\n        ) : (\n          <Box mt={4}>No information about actors.</Box>\n        )}\n      </>\n    );\n  }\n};\n\nexport default Cast;\n","import PropTypes from 'prop-types';\n\nexport default function Error({ error }) {\n  return <>{error}</>;\n}\n\nError.propTypes = {\n  error: PropTypes.string.isRequired,\n};\n","export const statusList = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n"],"names":["axios","api_key","IMG_PATH_W300","IMG_PATH_W200","mediaType","trendTime","language","fetchTrend","page","searchParams","URLSearchParams","response","data","fetchMovieById","movieId","options","fetchCreditsById","fetchReviewsById","fetchSearch","query","Img","styled","profile_path","name","character","profilePath","Box","display","flexDirection","gridGap","src","alt","width","height","loading","Ul","p","theme","space","Li","useParams","useState","castDataById","setCastDataById","statusList","status","setStatus","error","setError","useEffect","getMoviesCreditsById","PENDING","RESOLVED","REJECTED","cast","message","Loader","Error","length","map","id","mt","propTypes","PropTypes","IDLE"],"sourceRoot":""}